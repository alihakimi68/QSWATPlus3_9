# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'K:/Users/Public/QSWATPlus3/QSWATPlus\ui_Drawshape.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
# from .delineation import Delineation
from qgis.PyQt.QtWidgets import QVBoxLayout, QDialog
class Ui_drawshapedialog(object):

    def setupUi(self, drawshapedialog):
        drawshapedialog.setObjectName("drawshapedialog")
        drawshapedialog.resize(709, 578)
        self.button_box = QtWidgets.QDialogButtonBox(drawshapedialog)
        self.button_box.setGeometry(QtCore.QRect(350, 530, 341, 32))
        self.button_box.setOrientation(QtCore.Qt.Horizontal)
        self.button_box.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.button_box.setObjectName("button_box")
        self.groupBox_selectcategory = QtWidgets.QGroupBox(drawshapedialog)
        self.groupBox_selectcategory.setGeometry(QtCore.QRect(20, 60, 661, 71))
        self.groupBox_selectcategory.setObjectName("groupBox_selectcategory")
        self.label = QtWidgets.QLabel(self.groupBox_selectcategory)
        self.label.setGeometry(QtCore.QRect(30, 30, 331, 16))
        self.label.setObjectName("label")
        self.comboBox_selectcategory = QtWidgets.QComboBox(self.groupBox_selectcategory)
        self.comboBox_selectcategory.setGeometry(QtCore.QRect(360, 30, 141, 22))
        self.comboBox_selectcategory.setObjectName("comboBox_selectcategory")
        self.comboBox_selectcategory.addItem("")
        self.comboBox_selectcategory.addItem("")
        self.comboBox_selectcategory.addItem("")
        self.comboBox_selectcategory.addItem("")
        self.dockWidget = QtWidgets.QDockWidget(drawshapedialog)
        self.dockWidget.setGeometry(QtCore.QRect(580, 10, 120, 38))
        self.dockWidget.setObjectName("dockWidget")
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.dockWidget.setWidget(self.dockWidgetContents)
        self.cShapeButton = QtWidgets.QPushButton(drawshapedialog)
        self.cShapeButton.setGeometry(QtCore.QRect(380, 140, 291, 23))
        self.cShapeButton.setObjectName("cShapeButton")
        self.groupBox_drawpolygon = QtWidgets.QGroupBox(drawshapedialog)
        self.groupBox_drawpolygon.setGeometry(QtCore.QRect(20, 170, 661, 91))
        self.groupBox_drawpolygon.setObjectName("groupBox_drawpolygon")
        self.Labletest = QtWidgets.QLabel(self.groupBox_drawpolygon)
        self.Labletest.setGeometry(QtCore.QRect(530, 40, 101, 21))
        self.Labletest.setObjectName("Labletest")
        self.dPolygonButton = QtWidgets.QPushButton(self.groupBox_drawpolygon)
        self.dPolygonButton.setGeometry(QtCore.QRect(290, 40, 111, 23))
        self.dPolygonButton.setObjectName("dPolygonButton")
        self.dRectangleButton = QtWidgets.QPushButton(self.groupBox_drawpolygon)
        self.dRectangleButton.setGeometry(QtCore.QRect(30, 40, 111, 23))
        self.dRectangleButton.setObjectName("dRectangleButton")
        self.dCircleButton = QtWidgets.QPushButton(self.groupBox_drawpolygon)
        self.dCircleButton.setGeometry(QtCore.QRect(160, 40, 111, 23))
        self.dCircleButton.setObjectName("dCircleButton")
        self.groupBox_status = QtWidgets.QGroupBox(drawshapedialog)
        self.groupBox_status.setGeometry(QtCore.QRect(20, 270, 661, 251))
        self.groupBox_status.setObjectName("groupBox_status")
        self.tableWidget = QtWidgets.QTableWidget(self.groupBox_status)
        self.tableWidget.setGeometry(QtCore.QRect(30, 30, 511, 211))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        self.groupBox_modify = QtWidgets.QGroupBox(self.groupBox_status)
        self.groupBox_modify.setGeometry(QtCore.QRect(560, 20, 71, 221))
        self.groupBox_modify.setObjectName("groupBox_modify")
        self.toolButton_toggleediting = QtWidgets.QToolButton(self.groupBox_modify)
        self.toolButton_toggleediting.setGeometry(QtCore.QRect(20, 30, 25, 19))
        self.toolButton_toggleediting.setObjectName("toolButton_toggleediting")
        self.toolButton_Vertextool = QtWidgets.QToolButton(self.groupBox_modify)
        self.toolButton_Vertextool.setGeometry(QtCore.QRect(20, 70, 25, 19))
        self.toolButton_Vertextool.setObjectName("toolButton_Vertextool")
        self.toolButton_Save = QtWidgets.QToolButton(self.groupBox_modify)
        self.toolButton_Save.setGeometry(QtCore.QRect(20, 110, 25, 19))
        self.toolButton_Save.setObjectName("toolButton_Save")
        self.toolButton_Refresh = QtWidgets.QToolButton(self.groupBox_modify)
        self.toolButton_Refresh.setGeometry(QtCore.QRect(20, 150, 25, 19))
        self.toolButton_Refresh.setObjectName("toolButton_Refresh")

        self.retranslateUi(drawshapedialog)
        self.button_box.accepted.connect(drawshapedialog.accept)
        self.button_box.rejected.connect(drawshapedialog.reject)
        QtCore.QMetaObject.connectSlotsByName(drawshapedialog)

    def retranslateUi(self, drawshapedialog):
        _translate = QtCore.QCoreApplication.translate
        drawshapedialog.setWindowTitle(_translate("drawshapedialog", "Draw Shape"))
        self.groupBox_selectcategory.setTitle(_translate("drawshapedialog", "1- Category of shapefile"))
        self.label.setText(_translate("drawshapedialog", "Please select category of the Shapefile you want to add"))
        self.comboBox_selectcategory.setItemText(0, _translate("drawshapedialog", "Reservoir"))
        self.comboBox_selectcategory.setItemText(1, _translate("drawshapedialog", "Ponds"))
        self.comboBox_selectcategory.setItemText(2, _translate("drawshapedialog", "Wetland"))
        self.comboBox_selectcategory.setItemText(3, _translate("drawshapedialog", "Playas"))
        self.cShapeButton.setText(_translate("drawshapedialog", "Select Category / Draw : Select Catergory"))
        self.groupBox_drawpolygon.setTitle(_translate("drawshapedialog", "2- Draw a polygon"))
        self.Labletest.setText(_translate("drawshapedialog", "TextLabel"))
        self.dPolygonButton.setText(_translate("drawshapedialog", "Draw Polygon"))
        self.dRectangleButton.setText(_translate("drawshapedialog", "Draw Rectangle"))
        self.dCircleButton.setText(_translate("drawshapedialog", "Draw Circle"))
        self.groupBox_status.setTitle(_translate("drawshapedialog", "3- Status / Edit polygons"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("drawshapedialog", "Name"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("drawshapedialog", "RES"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("drawshapedialog", "Area"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("drawshapedialog", "Delete"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("drawshapedialog", "Modify"))
        self.groupBox_modify.setTitle(_translate("drawshapedialog", "Modify"))
        self.toolButton_toggleediting.setText(_translate("drawshapedialog", "T"))
        self.toolButton_Vertextool.setText(_translate("drawshapedialog", "V"))
        self.toolButton_Save.setText(_translate("drawshapedialog", "S"))
        self.toolButton_Refresh.setText(_translate("drawshapedialog", "R"))

#



# from PyQt5 import QtCore, QtGui, QtWidgets
#
#
# class Ui_drawshapedialog(object):
#     def setupUi(self, drawshapedialog):
#         drawshapedialog.setObjectName("DrawshapeDialog")
#         drawshapedialog.resize(800, 600)
#         icon = QtGui.QIcon()
#         icon.addPixmap(QtGui.QPixmap(":/plugins/QSWATPlus/swatplus.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
#         drawshapedialog.setWindowIcon(icon)
#         self.gridLayout_2 = QtWidgets.QGridLayout(drawshapedialog)
#         self.gridLayout_2.setObjectName("gridLayout_2")
#         self.hillslopesCheckBox = QtWidgets.QCheckBox(drawshapedialog)
#         self.hillslopesCheckBox.setEnabled(True)
#         self.hillslopesCheckBox.setAutoFillBackground(False)
#         self.hillslopesCheckBox.setChecked(False)
#         self.hillslopesCheckBox.setObjectName("hillslopesCheckBox")
#         self.gridLayout_2.addWidget(self.hillslopesCheckBox, 0, 0, 1, 2)
#         self.floodplainCheckBox = QtWidgets.QCheckBox(drawshapedialog)
#         self.floodplainCheckBox.setChecked(True)
#         self.floodplainCheckBox.setObjectName("floodplainCheckBox")
#         self.gridLayout_2.addWidget(self.floodplainCheckBox, 0, 2, 1, 2)
#         self.methodTab = QtWidgets.QTabWidget(drawshapedialog)
#         self.methodTab.setEnabled(True)
#         self.methodTab.setToolTip("")
#         self.methodTab.setObjectName("methodTab")
#         self.tab_3 = QtWidgets.QWidget()
#         self.tab_3.setObjectName("tab_3")
#         self.gridLayout_4 = QtWidgets.QGridLayout(self.tab_3)
#         self.gridLayout_4.setObjectName("gridLayout_4")
#         self.label_5 = QtWidgets.QLabel(self.tab_3)
#         self.label_5.setObjectName("label_5")
#         self.gridLayout_4.addWidget(self.label_5, 0, 0, 1, 2)
#         self.bufferMultiplier = QtWidgets.QSpinBox(self.tab_3)
#         sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
#         sizePolicy.setHorizontalStretch(0)
#         sizePolicy.setVerticalStretch(0)
#         sizePolicy.setHeightForWidth(self.bufferMultiplier.sizePolicy().hasHeightForWidth())
#         self.bufferMultiplier.setSizePolicy(sizePolicy)
#         self.bufferMultiplier.setMinimum(1)
#         self.bufferMultiplier.setProperty("value", 10)
#         self.bufferMultiplier.setObjectName("bufferMultiplier")
#         self.gridLayout_4.addWidget(self.bufferMultiplier, 1, 0, 1, 1)
#         self.label_6 = QtWidgets.QLabel(self.tab_3)
#         self.label_6.setObjectName("label_6")
#         self.gridLayout_4.addWidget(self.label_6, 1, 1, 1, 1)
#         self.methodTab.addTab(self.tab_3, "")
#         self.tab = QtWidgets.QWidget()
#         self.tab.setObjectName("tab")
#         self.gridLayout_3 = QtWidgets.QGridLayout(self.tab)
#         self.gridLayout_3.setObjectName("gridLayout_3")
#         self.label = QtWidgets.QLabel(self.tab)
#         self.label.setObjectName("label")
#         self.gridLayout_3.addWidget(self.label, 0, 0, 1, 4)
#         self.label_4 = QtWidgets.QLabel(self.tab)
#         self.label_4.setAlignment(QtCore.Qt.AlignCenter)
#         self.label_4.setObjectName("label_4")
#         self.gridLayout_3.addWidget(self.label_4, 1, 0, 1, 5)
#         self.ridgeThresholdCells = QtWidgets.QLineEdit(self.tab)
#         sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
#         sizePolicy.setHorizontalStretch(0)
#         sizePolicy.setVerticalStretch(0)
#         sizePolicy.setHeightForWidth(self.ridgeThresholdCells.sizePolicy().hasHeightForWidth())
#         self.ridgeThresholdCells.setSizePolicy(sizePolicy)
#         self.ridgeThresholdCells.setMinimumSize(QtCore.QSize(0, 20))
#         self.ridgeThresholdCells.setObjectName("ridgeThresholdCells")
#         self.gridLayout_3.addWidget(self.ridgeThresholdCells, 2, 0, 1, 1)
#         self.label_7 = QtWidgets.QLabel(self.tab)
#         self.label_7.setWordWrap(True)
#         self.label_7.setObjectName("label_7")
#         self.gridLayout_3.addWidget(self.label_7, 2, 1, 1, 1)
#         self.ridgeThresholdArea = QtWidgets.QLineEdit(self.tab)
#         sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
#         sizePolicy.setHorizontalStretch(0)
#         sizePolicy.setVerticalStretch(0)
#         sizePolicy.setHeightForWidth(self.ridgeThresholdArea.sizePolicy().hasHeightForWidth())
#         self.ridgeThresholdArea.setSizePolicy(sizePolicy)
#         self.ridgeThresholdArea.setMinimumSize(QtCore.QSize(0, 20))
#         self.ridgeThresholdArea.setObjectName("ridgeThresholdArea")
#         self.gridLayout_3.addWidget(self.ridgeThresholdArea, 2, 2, 1, 1)
#         self.label_8 = QtWidgets.QLabel(self.tab)
#         self.label_8.setObjectName("label_8")
#         self.gridLayout_3.addWidget(self.label_8, 2, 3, 1, 1)
#         self.areaUnitsBox = QtWidgets.QComboBox(self.tab)
#         self.areaUnitsBox.setMinimumSize(QtCore.QSize(0, 20))
#         self.areaUnitsBox.setObjectName("areaUnitsBox")
#         self.gridLayout_3.addWidget(self.areaUnitsBox, 2, 4, 1, 1)
#         self.methodTab.addTab(self.tab, "")
#         self.tab_2 = QtWidgets.QWidget()
#         self.tab_2.setObjectName("tab_2")
#         self.gridLayout = QtWidgets.QGridLayout(self.tab_2)
#         self.gridLayout.setObjectName("gridLayout")
#         self.label_2 = QtWidgets.QLabel(self.tab_2)
#         self.label_2.setObjectName("label_2")
#         self.gridLayout.addWidget(self.label_2, 0, 0, 1, 2)
#         self.branchThreshold = QtWidgets.QLineEdit(self.tab_2)
#         sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
#         sizePolicy.setHorizontalStretch(0)
#         sizePolicy.setVerticalStretch(0)
#         sizePolicy.setHeightForWidth(self.branchThreshold.sizePolicy().hasHeightForWidth())
#         self.branchThreshold.setSizePolicy(sizePolicy)
#         self.branchThreshold.setObjectName("branchThreshold")
#         self.gridLayout.addWidget(self.branchThreshold, 1, 0, 1, 1)
#         self.label_3 = QtWidgets.QLabel(self.tab_2)
#         self.label_3.setObjectName("label_3")
#         self.gridLayout.addWidget(self.label_3, 1, 1, 1, 1)
#         self.methodTab.addTab(self.tab_2, "")
#         self.gridLayout_2.addWidget(self.methodTab, 1, 0, 1, 4)
#         self.slopePositionSpinBox = QtWidgets.QDoubleSpinBox(drawshapedialog)
#         sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
#         sizePolicy.setHorizontalStretch(0)
#         sizePolicy.setVerticalStretch(0)
#         sizePolicy.setHeightForWidth(self.slopePositionSpinBox.sizePolicy().hasHeightForWidth())
#         self.slopePositionSpinBox.setSizePolicy(sizePolicy)
#         self.slopePositionSpinBox.setMaximum(1.0)
#         self.slopePositionSpinBox.setSingleStep(0.01)
#         self.slopePositionSpinBox.setProperty("value", 0.1)
#         self.slopePositionSpinBox.setObjectName("slopePositionSpinBox")
#         self.gridLayout_2.addWidget(self.slopePositionSpinBox, 2, 0, 1, 1)
#         self.slopePositionLabel = QtWidgets.QLabel(drawshapedialog)
#         self.slopePositionLabel.setObjectName("slopePositionLabel")
#         self.gridLayout_2.addWidget(self.slopePositionLabel, 2, 1, 1, 3)
#         self.createButton = QtWidgets.QPushButton(drawshapedialog)
#         self.createButton.setObjectName("createButton")
#         self.gridLayout_2.addWidget(self.createButton, 3, 2, 1, 1)
#         self.doneButton = QtWidgets.QPushButton(drawshapedialog)
#         self.doneButton.setObjectName("doneButton")
#         self.gridLayout_2.addWidget(self.doneButton, 3, 3, 1, 1)
#
#         self.retranslateUi(drawshapedialog)
#         self.methodTab.setCurrentIndex(0)
#         QtCore.QMetaObject.connectSlotsByName(drawshapedialog)
#
#     def retranslateUi(self, drawshapedialog):
#         _translate = QtCore.QCoreApplication.translate
#         drawshapedialog.setWindowTitle(_translate("drawshapedialog", "Drawshape analysis"))
#         self.hillslopesCheckBox.setToolTip(_translate("drawshapedialog", "Divide each subbasin into left and right hillslopes plus, for subbasins containing a stream source, the headwater area."))
#         self.hillslopesCheckBox.setText(_translate("drawshapedialog", "Calculate hillslopes"))
#         self.floodplainCheckBox.setToolTip(_translate("drawshapedialog", "Divide each subbasin into a floodplain and upslope area."))
#         self.floodplainCheckBox.setText(_translate("drawshapedialog", "Calculate floodplain"))
#         self.label_5.setText(_translate("drawshapedialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
# "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
# "p, li { white-space: pre-wrap; }\n"
# "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
# "<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Use a channel buffer as the floodplain</p></body></html>"))
#         self.bufferMultiplier.setToolTip(_translate("drawshapedialog", "<html><head/><body><p>The width of the buffer each side of the stream is the stream width times the buffer multiplier.</p></body></html>"))
#         self.label_6.setToolTip(_translate("drawshapedialog", "<html><head/><body><p>The width of the buffer each side of the stream is the stream width times the buffer multiplier.</p></body></html>"))
#         self.label_6.setText(_translate("drawshapedialog", "Buffer multiplier                                                    "))
#         self.methodTab.setTabText(self.methodTab.indexOf(self.tab_3), _translate("drawshapedialog", "Buffer channels"))
#         self.label.setText(_translate("drawshapedialog", "Use an inverted DEM to calculate ridges"))
#         self.label_4.setToolTip(_translate("drawshapedialog", "<html><head/><body><p>The minimum number of cells flowing to a point in an inverted DEM for the point to be considered a ridge cell.  The default is the same number of cells as the stream delineation threshold.</p></body></html>"))
#         self.label_4.setText(_translate("drawshapedialog", "Ridge threshold"))
#         self.ridgeThresholdCells.setToolTip(_translate("drawshapedialog", "<html><head/><body><p>The minimum number of cells flowing to a point in an inverted DEM for the point to be considered a ridge cell. The default is the same number of cells as the stream delineation threshold.</p></body></html>"))
#         self.label_7.setText(_translate("drawshapedialog", "Number of cells"))
#         self.ridgeThresholdArea.setToolTip(_translate("drawshapedialog", "<html><head/><body><p>The minimum area flowing to a point in an inverted DEM for the point to be considered a ridge cell. The default is the same area as the stream delineation threshold.</p></body></html>"))
#         self.label_8.setText(_translate("drawshapedialog", "Area "))
#         self.methodTab.setTabText(self.methodTab.indexOf(self.tab), _translate("drawshapedialog", "DEM inversion"))
#         self.label_2.setText(_translate("drawshapedialog", "Use branch lengths to calculate ridges"))
#         self.branchThreshold.setToolTip(_translate("drawshapedialog", "<html><head/><body><p>Adjacent points are defined as ridge points if the flow length in metres to where their flow paths join is at least this threshold. The default threshold is 2√A where A is the subbasin threshold in square metres.</p></body></html>"))
#         self.label_3.setToolTip(_translate("drawshapedialog", "<html><head/><body><p>Adjacent points are defined as ridge points if the flow length in metres to where their flow paths join is at least this threshold. The default threshold is 2√A where A is the subbasin threshold in square metres.</p></body></html>"))
#         self.label_3.setText(_translate("drawshapedialog", "Threshold branch length in metres                 "))
#         self.methodTab.setTabText(self.methodTab.indexOf(self.tab_2), _translate("drawshapedialog", "Branch length"))
#         self.slopePositionSpinBox.setToolTip(_translate("drawshapedialog", "<html><head/><body><p>Maximum ratio of height of a  point above valley floor to height of ridge above valley floor for a point to be in the floodplain.  Must be between 0 and 1.</p></body></html>"))
#         self.slopePositionLabel.setToolTip(_translate("drawshapedialog", "<html><head/><body><p>Maximum ratio of height of a  point above valley floor to height of ridge above valley floor for a point to be in the floodplain.  Must be between 0 and 1.</p></body></html>"))
#         self.slopePositionLabel.setText(_translate("drawshapedialog", "Slope position threshold"))
#         self.createButton.setText(_translate("drawshapedialog", "Create"))
#         self.doneButton.setText(_translate("drawshapedialog", "Done"))
# from . import resources_rc
